Настройки подключения к БД хранятся в файле .env.
В этом файле настройки подключения к БД находятся в ключах с префиксом DB.
Если мы хотим использоват ьсвои настройки, мы можем в этом файле их описать и также
вытаскивать при помощи функции env.
Меняем:
DB_DATABASE = имя нашей БД
DB_USERNAME = root
DB_PASSWORD =

    Миграции
Аналог контроля версий, но только для БД.
В миграции есть 2 типа методов: up, down.
1-й метод создает таблицу (или проводит изменения).
2-й метод - откат изменнений, т.е. если мы создавали таблицу, то она удалится, если меняли
то в этом методе надо будет удалить эти поля.

    Создание миграций
php artisan make:migration create_films(название миграции) --create=films (что мы делаем в миграции)
Новая миграция появится в папке database/Migrаtions.
В этой миграции уже сгенерирован небольшой код.
В новой миграции будет создан класс аналогичный "название миграции", это очень важно, чтоб
название миграций были разными, иначе у нас может быть декларирование классов с одинаковыми
именами.

    Запуск миграции

Для избежания ошибки 1071, необходимо в app/providers/AppServiceProvider вставить в
метод boot строку Schema::defaultStringLength(191);
Далее в терминале запускаем php artisan migrate.

    Откат миграции
Для отката одного действия пишем php artisan migrate:rollback
Может принимать флаги, например --step=2, отменит 2 последних шага миграции.
Для полного отката всех миграций php artisan migrate:reset
php artisan migrate:refresh - откатит все изменения и заново выполнит миграцию.


Для внесения изменений в базу делаем make:migration (название миграции) --table=films
В миграции в методе up создаем нашу новую колонку.
В методе down пишем $table->dropColumn("название колонки").
Далее снова пишем php artisan migrate.

    Модификаторы колонок

По-умолчанию значение колонки не может быть null, для того, чтобы установить такое значение:
Schema::table('users', function (Blueprint $table) {
    $table->string('email')->nullable();
});
default($value) - можно установить значение в ячейке по-умолчанию
->unsigned()
->unique()
->primary("id") - первичный ключ
и пр.

    Апдейт колонок
Метод change позволяет модифицировать типы данных и аттрибуты
Например увеличить размер строки
Schema::table('users', function (Blueprint $table) {
    $table->string('name', 50)->change();
});
Или разрешить колонке принимать Null значения
Schema::table('users', function (Blueprint $table) {
     $table->string('name', 50)->nullable()->change();
 });

Переименование колонок.
Schema::table('users', function (Blueprint $table) {
    $table->renameColumn('from', 'to');
});

    Внешние ключи

Для примера определим внешний ключ для поля user_id в таблице posts, который ссылается на
id в таблице users:
Schema::table('posts', function (Blueprint $table) {
    $table->unsignedBigInteger('user_id');
    $table->foreign('user_id')->references('id')->on('users');
});
Следующим образом мы определяем правила при обновлении и удалении
$table->foreign('user_id')
      ->references('id')->on('users')
      ->onDelete('cascade');

Для удаления внешнего ключа:
$table->dropForeign('posts_user_id_foreign');
Название внещнего ключа генерируется автоматом, и состоит из имени таблицы, колонки и суффикса






