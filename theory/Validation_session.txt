https://www.youtube.com/watch?v=iWSg-oCo7FI&t=1039s

        Валидация

Есть 2 способа провалидировать данные.
Валидация уже вшита в класс контроллер, при помощи трейта.

        Способ 1. Работа только с Request.

Если к нам попадает объект класса Request, мы можем его проверить
следующим образом:
Пишем правила и опционно, 3-м параметром,
можем написать массив сообщений, которые будут
появляться в случае ошибок, вместо стандартных Ларавел.
$this->validate($request,[
'name'=>'required|min:2|alpha',
'email'=>'required|email',
'number'=>'required|integer|between:1900,2018'
],[
'name.required'=>"Заполните поле - имя",
'name.alpha'=>"Поле имя должно содержать только буквы",
]);
Если валидация не прошла, то происходит редирект на ту же страницу,
но в сессию приедут ошибки.

    Обработка ошибок в форме.
1. В наших полях ввода в аттриьут value запишем {{old('field_name')}}.
В таком случае, у нас будет автозаполнение старыми значениями, если их
не будет, то вместо значений будет пустое место.
2. Вставляем блок с ошибками.
@if($errors->has('field_name'))
{{$errors->first('field_name')}}
@endif
3. Удобно еще подсвечивать инпуты с ошибками, например
<input type='text' name='name' class={{$errors->has('name')?'error':''}}>

        Способ 2. Обработка любого массива.

1. Используем фасад /Support/Facades/Validator.
2. Создадим объект:
$validator = Validator::make($array,[
    'name'=>'required|min:2|alpha',
    'email'=>'required|email',
    'number'=>'required|integer|between:1900,2018'
]);
3. Проверим на ошибки валидации, и сделаем редирект с ошибками.
if($validator->fails()){
    return redirect()->route('form')->withErrors($validator)->
           withInput();
}
Здесь мы можем првоерить любые данные.
В этом способе мы можем полонстью контроллировать процесс валидации.

З.Ы. Перевод ошибок и указание имен полейможно делать в файле:
 resources/lang/validation.php

        Сессии

в файле .env есть настройки для работы с сессией.
SESSION DRIVER
SESSION LIFETIME
По-умолчанию для работы с сессией используется файл, и время жизни
сессии: 2 часа.
В драйвере кроме файла могут использоваться куки, или датабейз, мемкеш,
редис или аррей(для отладки). Куки самый незащищеный!

Для использования БД, в терминале надо запустить команду: php artisan session:table
Эта команда сделает миграцию таблицы для работы с сессией.

Время жизни сессии в файле ограничено самими настройками ПХП, если там
указано, что врем жизни 1 час, то даже если мы здесь зададим SESSION LIFETIME
120 минут, через час сессия все равно умрет.

    Взаимодествие с сессией

В Ларавеле сушествует 3 способа взаимодействия с сессией.
1. Если мы принимаем Request, у него уже есть свой механизм работы с
сессией.
$request->session()->put('name','vasia') - положили в ключ - значение.
$request->session()->get('vasia') - получить данные.
Сессии стартуют через миддлвейр SessionStart
$request->session()->all() - получить все значения.
$request->session()->has('vasia') - проверить наличие значения.
$request->session()->remove('vasia') - удаление.

2. Для того, чтобы получить что-либо из сессии:
session('name')
Для того, чтобы положить:
session(['name'=>'vasia','surname'=>'pupkin']);

3. Фасад Session. Имеет массу методов, самые интересные:
flush - сохранить текущее состояние сессии, pull - достать и удалить
из сессии, flash - записать новое значение в сессию, reflash - продлить
срок жизни еще на одну сессию.



